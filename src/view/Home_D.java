/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;


import controller.DrawLine;
import controller.GraphD;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import model.Edge;
import model.Node;


/**
 *
 * @author Tom
 */
public final class Home_D extends javax.swing.JFrame {

    public GraphD graph_d;
    public Point p; 
    
    public Node node_selected_a;
    public Node node_selected_b;

    
    public int node_posx;
    public int node_posy;
    public int count=0;
    public boolean flag=false;
    
   
    
    ImageIcon image_node = new ImageIcon(getClass().getResource("/images/node.png"));
    ImageIcon image_select = new ImageIcon(getClass().getResource("/images/node_select.png"));
       
    private DrawLine line;

   

    /**
     * Creates new form Index
     * @param graph_d
     */
    public Home_D(GraphD graph_d) {
      
        initComponents();
        setSize(900, 500);
        setResizable(false);
        setVisible(true);
        this.graph_d = graph_d;
        DrawPanel.repaint();
        OptionsPanel.add(GraphOpPanel);
        
        OptionsPanel.add(NodeOpPanel);
        
        OptionsPanel.add(EdgeOpPanel);
        setOpPanelGraph();
        
                
       
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TypeGraph = new javax.swing.ButtonGroup();
        DrawPanel = new javax.swing.JPanel();
        OptionsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BackLabelButton = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SelectedObjectLabel = new javax.swing.JLabel();
        NodeOpPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        getAdjNodesButton = new javax.swing.JButton();
        GraphOpPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        getAdjMatrixButton = new javax.swing.JButton();
        isEmptyButton = new javax.swing.JButton();
        cleanGraphButton = new javax.swing.JButton();
        existNodeButton = new javax.swing.JButton();
        existEdgeButton = new javax.swing.JButton();
        EdgeOpPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        addEdgeButton = new javax.swing.JButton();
        getWeightEdgeButton = new javax.swing.JButton();
        eraseEdgeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(31, 35, 38));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(1000, 500));

        DrawPanel.setBackground(new java.awt.Color(42, 54, 59));
        DrawPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DrawPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DrawPanel.setFont(new java.awt.Font("GeosansLight", 1, 12)); // NOI18N
        DrawPanel.setMaximumSize(new java.awt.Dimension(547, 500));
        DrawPanel.setMinimumSize(new java.awt.Dimension(547, 500));
        DrawPanel.setPreferredSize(new java.awt.Dimension(547, 500));
        DrawPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                DrawPanelMouseMoved(evt);
            }
        });
        DrawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DrawPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout DrawPanelLayout = new javax.swing.GroupLayout(DrawPanel);
        DrawPanel.setLayout(DrawPanelLayout);
        DrawPanelLayout.setHorizontalGroup(
            DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 596, Short.MAX_VALUE)
        );
        DrawPanelLayout.setVerticalGroup(
            DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        OptionsPanel.setBackground(new java.awt.Color(31, 35, 38));

        jLabel1.setFont(new java.awt.Font("GeosansLight", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(254, 206, 174));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel1.text")); // NOI18N

        BackLabelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left-arrow.png"))); // NOI18N
        BackLabelButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.BackLabelButton.text")); // NOI18N
        BackLabelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackLabelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackLabelButtonMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("GeosansLight", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(254, 206, 174));
        jLabel3.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel3.text")); // NOI18N

        SelectedObjectLabel.setFont(new java.awt.Font("GeosansLight", 1, 18)); // NOI18N
        SelectedObjectLabel.setForeground(new java.awt.Color(254, 206, 174));
        SelectedObjectLabel.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.SelectedObjectLabel.text")); // NOI18N

        NodeOpPanel.setBackground(new java.awt.Color(31, 35, 38));
        NodeOpPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        NodeOpPanel.setMaximumSize(new java.awt.Dimension(378, 358));
        NodeOpPanel.setMinimumSize(new java.awt.Dimension(378, 358));
        NodeOpPanel.setPreferredSize(new java.awt.Dimension(378, 358));
        NodeOpPanel.setRequestFocusEnabled(false);
        NodeOpPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(254, 206, 174));
        jLabel6.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel6.text")); // NOI18N
        NodeOpPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, -1, -1));

        getAdjNodesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        getAdjNodesButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.getAdjNodesButton.text")); // NOI18N
        getAdjNodesButton.setBorderPainted(false);
        getAdjNodesButton.setContentAreaFilled(false);
        getAdjNodesButton.setMultiClickThreshhold(4L);
        getAdjNodesButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        getAdjNodesButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        getAdjNodesButton.setSelected(true);
        getAdjNodesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAdjNodesButtonActionPerformed(evt);
            }
        });
        NodeOpPanel.add(getAdjNodesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 30, 40));

        GraphOpPanel.setBackground(new java.awt.Color(31, 35, 38));
        GraphOpPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        GraphOpPanel.setDoubleBuffered(false);
        GraphOpPanel.setMaximumSize(new java.awt.Dimension(378, 358));
        GraphOpPanel.setMinimumSize(new java.awt.Dimension(378, 358));
        GraphOpPanel.setPreferredSize(new java.awt.Dimension(378, 358));
        GraphOpPanel.setRequestFocusEnabled(false);
        GraphOpPanel.setVerifyInputWhenFocusTarget(false);
        GraphOpPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(254, 206, 174));
        jLabel7.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel7.text")); // NOI18N
        GraphOpPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, -1, -1));

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(254, 206, 174));
        jLabel16.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel16.text")); // NOI18N
        GraphOpPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, -1, -1));

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(254, 206, 174));
        jLabel17.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel17.text")); // NOI18N
        GraphOpPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, -1, -1));

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(254, 206, 174));
        jLabel18.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel18.text")); // NOI18N
        GraphOpPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, -1, -1));

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(254, 206, 174));
        jLabel19.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel19.text")); // NOI18N
        GraphOpPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, -1, -1));

        getAdjMatrixButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        getAdjMatrixButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.getAdjMatrixButton.text")); // NOI18N
        getAdjMatrixButton.setBorderPainted(false);
        getAdjMatrixButton.setContentAreaFilled(false);
        getAdjMatrixButton.setMultiClickThreshhold(4L);
        getAdjMatrixButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        getAdjMatrixButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        getAdjMatrixButton.setSelected(true);
        getAdjMatrixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAdjMatrixButtonActionPerformed(evt);
            }
        });
        GraphOpPanel.add(getAdjMatrixButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 30, 40));

        isEmptyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        isEmptyButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.isEmptyButton.text")); // NOI18N
        isEmptyButton.setBorderPainted(false);
        isEmptyButton.setContentAreaFilled(false);
        isEmptyButton.setMultiClickThreshhold(4L);
        isEmptyButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        isEmptyButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        isEmptyButton.setSelected(true);
        isEmptyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isEmptyButtonActionPerformed(evt);
            }
        });
        GraphOpPanel.add(isEmptyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 30, 40));

        cleanGraphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        cleanGraphButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.cleanGraphButton.text")); // NOI18N
        cleanGraphButton.setBorderPainted(false);
        cleanGraphButton.setContentAreaFilled(false);
        cleanGraphButton.setMultiClickThreshhold(4L);
        cleanGraphButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        cleanGraphButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        cleanGraphButton.setSelected(true);
        cleanGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanGraphButtonActionPerformed(evt);
            }
        });
        GraphOpPanel.add(cleanGraphButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 30, 40));

        existNodeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        existNodeButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.existNodeButton.text")); // NOI18N
        existNodeButton.setBorderPainted(false);
        existNodeButton.setContentAreaFilled(false);
        existNodeButton.setMultiClickThreshhold(4L);
        existNodeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        existNodeButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        existNodeButton.setSelected(true);
        existNodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existNodeButtonActionPerformed(evt);
            }
        });
        GraphOpPanel.add(existNodeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 30, 40));

        existEdgeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        existEdgeButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.existEdgeButton.text")); // NOI18N
        existEdgeButton.setBorderPainted(false);
        existEdgeButton.setContentAreaFilled(false);
        existEdgeButton.setMultiClickThreshhold(4L);
        existEdgeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        existEdgeButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        existEdgeButton.setSelected(true);
        existEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existEdgeButtonActionPerformed(evt);
            }
        });
        GraphOpPanel.add(existEdgeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 180, 30, 40));

        EdgeOpPanel.setBackground(new java.awt.Color(31, 35, 38));
        EdgeOpPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        EdgeOpPanel.setMaximumSize(new java.awt.Dimension(378, 358));
        EdgeOpPanel.setMinimumSize(new java.awt.Dimension(378, 358));
        EdgeOpPanel.setPreferredSize(new java.awt.Dimension(378, 358));
        EdgeOpPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(254, 206, 174));
        jLabel8.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel8.text")); // NOI18N
        EdgeOpPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, -1, -1));

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(254, 206, 174));
        jLabel20.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel20.text")); // NOI18N
        EdgeOpPanel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, -1, -1));

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(254, 206, 174));
        jLabel21.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.jLabel21.text")); // NOI18N
        EdgeOpPanel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, -1, -1));

        addEdgeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        addEdgeButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.addEdgeButton.text")); // NOI18N
        addEdgeButton.setBorderPainted(false);
        addEdgeButton.setContentAreaFilled(false);
        addEdgeButton.setMultiClickThreshhold(4L);
        addEdgeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        addEdgeButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        addEdgeButton.setSelected(true);
        addEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeButtonActionPerformed(evt);
            }
        });
        EdgeOpPanel.add(addEdgeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 30, 40));

        getWeightEdgeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        getWeightEdgeButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.getWeightEdgeButton.text")); // NOI18N
        getWeightEdgeButton.setBorderPainted(false);
        getWeightEdgeButton.setContentAreaFilled(false);
        getWeightEdgeButton.setMultiClickThreshhold(4L);
        getWeightEdgeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        getWeightEdgeButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        getWeightEdgeButton.setSelected(true);
        getWeightEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getWeightEdgeButtonActionPerformed(evt);
            }
        });
        EdgeOpPanel.add(getWeightEdgeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 30, 40));

        eraseEdgeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonpress.png"))); // NOI18N
        eraseEdgeButton.setText(org.openide.util.NbBundle.getMessage(Home_D.class, "Home_D.eraseEdgeButton.text")); // NOI18N
        eraseEdgeButton.setBorderPainted(false);
        eraseEdgeButton.setContentAreaFilled(false);
        eraseEdgeButton.setMultiClickThreshhold(4L);
        eraseEdgeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        eraseEdgeButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttonNoPress.png"))); // NOI18N
        eraseEdgeButton.setSelected(true);
        eraseEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseEdgeButtonActionPerformed(evt);
            }
        });
        EdgeOpPanel.add(eraseEdgeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 30, 40));

        javax.swing.GroupLayout OptionsPanelLayout = new javax.swing.GroupLayout(OptionsPanel);
        OptionsPanel.setLayout(OptionsPanelLayout);
        OptionsPanelLayout.setHorizontalGroup(
            OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsPanelLayout.createSequentialGroup()
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SelectedObjectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(OptionsPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(BackLabelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(NodeOpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsPanelLayout.createSequentialGroup()
                    .addContainerGap(22, Short.MAX_VALUE)
                    .addComponent(GraphOpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(2, 2, 2)))
            .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EdgeOpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        OptionsPanelLayout.setVerticalGroup(
            OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BackLabelButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(35, 35, 35)
                .addComponent(SelectedObjectLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NodeOpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsPanelLayout.createSequentialGroup()
                    .addContainerGap(156, Short.MAX_VALUE)
                    .addComponent(GraphOpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(17, 17, 17)))
            .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsPanelLayout.createSequentialGroup()
                    .addContainerGap(166, Short.MAX_VALUE)
                    .addComponent(EdgeOpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(7, 7, 7)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(OptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 388, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DrawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DrawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        DrawPanel.getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //OPERACIONES CON NODO
    private void DrawPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DrawPanelMouseClicked
        
        Node node = new Node();
        Point p_node = evt.getPoint();
        node_posx = p_node.x;
        node_posy = p_node.y;
        
        
        JLabel label= new JLabel();
        label.setIcon(image_node);
        label.setText(String.valueOf(this.count));
        label.setForeground(Color.white);

        node.setId(this.count);

        JPopupMenu menu = addListener_MenuActionNode(node,label);
        label.add(menu);
        label.setComponentPopupMenu(menu);
       
        MouseAdapter m = create_MouseListener_Label(label,node,menu);
        label.addMouseListener(m);
      

        Dimension size = label.getPreferredSize();
        label.setBounds(node_posx , node_posy , size.width  , size.height);
        add_node(node,node_posx,node_posy,label);
       
        
        reset_values();

        this.count = this.count+1;
    }//GEN-LAST:event_DrawPanelMouseClicked
    private void add_node(Node n,int node_posx,int node_posy,JLabel label){
        n.setPosX(node_posx);
        n.setPosY(node_posy);
        n.setIcon(label);
        graph_d.add_node(n);
       
    }
    public void adjacency_nodes(){
        
        
        ArrayList<Node> adjnodes = graph_d.adj_nodes(node_selected_a);
        if(adjnodes.size()>0){
            String message = "\n Nodos adjacentes: \n ";
            for (Node n : adjnodes) {
                 message +=  + n.getId()+" ";
            }
            JOptionPane.showMessageDialog(this, "Adjacente a:"+message);
            }
        else{
            JOptionPane.showMessageDialog(this, "No tiene nodos adjacentes");
        }
        reset_values();
        
        
    }
    private void erase_node(int lab_to_erase){
       
        Node node_to_erase = new Node();    
        for(Node n : graph_d.g.getGraph()){
            if(n.id==lab_to_erase){
                node_to_erase = n;         
            }
        }
        graph_d.remove_node(node_to_erase);
 
        DrawPanel.remove(node_to_erase.getIcon()); 
        
        reset_values();
    }
    public MouseAdapter create_MouseListener_Label(JLabel label, Node node, JPopupMenu menu) {
     MouseAdapter m = new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e){
                
                if(node_selected_a == null){
                    node_selected_a = node;
                    label.setIcon(image_select);
                    setOpPanelNode();
                  
                  
                   
                }else
                    if(node_selected_b == null){
                       
                        node_selected_b = node;
                        label.setIcon(image_select);
                        setOpPanelEdge();
                        
                        
                        
                    }else{
                        setOpPanelGraph();
                    }
                    
            }

            @Override
            public void mousePressed(MouseEvent e){
                Point point = e.getPoint();
                line = new DrawLine(p,p,Color.white);
                ImageIcon image_drag = new ImageIcon(getClass().getResource("/images/drag_node.png"));
                label.setIcon(image_drag);
            }

            @Override
            public void mouseReleased(MouseEvent e){
                label.setIcon(image_node);
            }
        };
     return m;
    }     
    public JPopupMenu addListener_MenuActionNode(Node node,JLabel label){
        JPopupMenu menu = new JPopupMenu("Menu");      
        JMenuItem delete_item = new JMenuItem("Borrar");
       
        delete_item.addActionListener((ActionEvent ev) -> {
            erase_node(node.getId());
            menu.setVisible(false);
            
        });
        menu.add(delete_item);
        return menu;
    
    }
   
    
    //OPERACIONES CON ARISTAS
    private void add_edge(){
       setOpPanelGraph();
        node_selected_a.getIcon().setIcon(image_node);
        node_selected_b.getIcon().setIcon(image_node);
        
        Point p1 = new Point();
        Point p2 = new Point();
        p1.x =  node_selected_a.getPosX();
        p1.y =  node_selected_a.getPosY();
        p2.x =  node_selected_b.getPosX();
        p2.y =  node_selected_b.getPosY();
       
        Object weight_input = JOptionPane.showInputDialog(DrawPanel, "Peso de arista:");
        String weight = weight_input.toString();
        
        graph_d.add_edge(node_selected_a,node_selected_b,Integer.parseInt(weight));
        
       
       reset_values();
       
        
       
     
    }
    private void erase_edge(){
        
        if(exist_edge()){
        graph_d.remove_edge(node_selected_a, node_selected_b);
        }else{
         JOptionPane.showMessageDialog(this, "La arista no existe.");
        }
         
     
        reset_values();
       
    }
    private boolean exist_edge(){
        return graph_d.exist_edge(node_selected_a, node_selected_b);
    }
    public void get_weight(){
        Node from = node_selected_a;
        Node to = node_selected_b;
        if(exist_edge()){
            int value = graph_d.weight_edge(from,to);
            JOptionPane.showMessageDialog(this, "La arista ( "+from.getId()+","+to.getId()+" ) pesa: "+value);
        }else{
           JOptionPane.showMessageDialog(this, "La arista no existe.");
          }
          reset_values();
    }
    public void paint_edge(){
           
            Graphics g = DrawPanel.getGraphics();
            Graphics2D g2d= (Graphics2D)g;
            g2d.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON );
            for(Node n : graph_d.g.getGraph()){   
                for(Edge e : n.getEdges()){
                    g2d.draw(e.getEdgeArrow());
                 }
        }
       DrawPanel.printComponents(g);
       DrawPanel.repaint();
       
       }

    
    //Matriz de adjacencia
    private void adjacency_matrix(){
        StringBuilder column = new StringBuilder();
        StringBuilder text = new StringBuilder();
        int[][] adj_matrix = graph_d.adjacency_matrix();
        
        column.append("          ");
        for(Node n : graph_d.getGraphD().getGraph()){
            column.append("        Nodo:").append(n.getId());
        }
        column.append("\n\n");
        text.append(" ");
        
        int i = 0;
        int j = 0;
        
         for(Node n : graph_d.getGraphD().getGraph()){
            text.append("Nodo:").append(n.getId());
            
            for( j = 0 ; j<graph_d.getGraphD().graph_size();j++){
                text.append("           ").append(adj_matrix[i][j]).append("        ");           
            }
         i = i + 1;
         text.append(" \n \n ");
         
         }
      
        JOptionPane.showMessageDialog(null,"Matriz Adjacencia:\n \n"+column.toString()+text.toString());
        
    }
    
    
    //MENU PANEL
    public void setOpPanelGraph(){
     SelectedObjectLabel.setText("  Grafo" );
     NodeOpPanel.setVisible(false);
     EdgeOpPanel.setVisible(false);
     GraphOpPanel.setVisible(true);
     paint();
     
    
        
    
    }
    public void  setOpPanelNode(){
         
        SelectedObjectLabel.setText("  Nodo Seleccionado "+node_selected_a.id);
         GraphOpPanel.setVisible(false);
         EdgeOpPanel.setVisible(false);
         NodeOpPanel.setVisible(true);
           paint();
         //PanelActionsPanel.setVisible(false);
         
    }
    public void  setOpPanelEdge(){
        SelectedObjectLabel.setText("  Nodos Seleccionados "+node_selected_a.id+" y "+node_selected_b.id+" ");
        NodeOpPanel.setVisible(false);
        GraphOpPanel.setVisible(false);
        EdgeOpPanel.setVisible(true); 
        
          paint();
       
        
        
         //PanelActionsPanel.setVisible(false);
         
    }
    
    
    public void reset_values(){
        if(node_selected_a != null)  
            node_selected_a.getIcon().setIcon(image_node);
        if(node_selected_b != null)
            node_selected_b.getIcon().setIcon(image_node);
        
        node_selected_a = null;
        node_selected_b = null;
        
       setOpPanelGraph();
        paint();
         
      
      
        

    }
    //PINTAR EN JPANEL DRAWPANEL
    public void paint(){
            
            Graphics g = DrawPanel.getGraphics() ;
            
            DrawPanel.paint(g);
            Graphics2D g2d= (Graphics2D)g;
            g2d.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON );
                  
            Point p1 = new Point();
            Point p2 = new Point();

           
            for(Node n : graph_d.g.getGraph()){
                DrawPanel.add(n.getIcon());

                for(Edge e : n.getEdges()){
                    
                    Node ed_node = graph_d.search_node(e.getId());
               
                    //CENTRO ORIGEN
                    Rectangle rct_or = n.getIcon().getBounds();
                    double center_rectX = rct_or.getCenterX();
                    double center_rectY = rct_or.getCenterY();
                    Point p_n_center = new Point();
                    p_n_center.x = (int) center_rectX;
                    p_n_center.y = (int) center_rectY;
                    
                    //CENTRO DESTINO
                    Rectangle rct_dest = ed_node.getIcon().getBounds();
                    
                    double center_rect_dest_X =  rct_dest.getCenterX();
                    double center_rect_dest_Y =  rct_dest.getCenterY();
                  
                    Point p_nd_center = new Point();
                    p_nd_center.x = (int) center_rect_dest_X;
                    p_nd_center.y = (int) center_rect_dest_Y;
                   
                    
                    //FLECHA
                    Point punto1 = new Point (p_n_center.x,p_n_center.y);
                    Point punto2 = new Point(p_nd_center.x, p_nd_center.y);
                    Point punto=punto2;
                    int dist = 10;
                    
                    double ty=-(p_n_center.y-p_nd_center.y)*1.0;
                    double tx=(p_n_center.x-p_nd_center.x)*1.0;
                    //angulo
                    double ang=Math.atan (ty/tx);
                    
                    
                    if(tx<0){// si tx es negativo aumentar 180 grados
                        ang+=Math.PI;
                    }
                    
                    if(p_n_center.x>p_nd_center.x){

                         punto.x =  punto2.x + 15;
                    }else
                    {
                        punto.x =  punto2.x - 15; 
                    }
                    if(p_n_center.y > p_nd_center.y){
                        punto.y = punto2.y + 15;
                    }else{
                          punto.y = punto2.y - 15;
                    }
                   
                   
                    
                    
                    float angSep=(float) 20.0;
                    
                    p1.x=(int)(punto.x+dist*Math.cos (ang-Math.toRadians (angSep)));
                    p1.y=(int)(punto.y-dist*Math.sin (ang-Math.toRadians (angSep)));
                    p2.x=(int)(punto.x+dist*Math.cos (ang+Math.toRadians (angSep)));
                    p2.y=(int)(punto.y-dist*Math.sin (ang+Math.toRadians (angSep)));
                       
                    g.setColor(Color.lightGray);
                    g.drawString(String.valueOf("("+n.id+","+e.id+") : "+e.weight), (p_n_center.x+punto.x)/2,(p_n_center.y+punto.y)/2);
                    g2d.setStroke (new BasicStroke(2f));
                   // g2d.drawLine (p_n_center.x,p_n_center.y,punto.x,punto.y);
                    
                    
                    
                    Line2D edgeArrow_ = new Line2D.Double(punto1,punto);
                    
                    e.setEdgeArrow(edgeArrow_);
             
                    
                    g2d.draw(edgeArrow_);
                    
                   g.drawLine (p1.x,p1.y,punto.x,punto.y);
                   g.drawLine (p2.x,p2.y,punto.x,punto.y); 
                   
                    
                    
                 DrawPanel.printComponents(g);
                //DrawPanel.paintComponents(g);
                 
                    
                }
                DrawPanel.printComponents(g);
                 //DrawPanel.paintComponents(g);
                
            }
             DrawPanel.printComponents(g);
        
    }
    


    private void DrawPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DrawPanelMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_DrawPanelMouseMoved

    private void isEmptyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isEmptyButtonActionPerformed
        if(graph_d.g.is_empty()){
           
        JOptionPane.showMessageDialog(this, "El grafo es vacio");
        }else{
        JOptionPane.showMessageDialog(this, "El grafo no es vacio");
        }
        
    }//GEN-LAST:event_isEmptyButtonActionPerformed

    private void cleanGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanGraphButtonActionPerformed
        graph_d.g.clear_graph();
        this.count = 0;
        DrawPanel.removeAll();
        paint();

    }//GEN-LAST:event_cleanGraphButtonActionPerformed

    private void existNodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existNodeButtonActionPerformed
       
       String id = JOptionPane.showInputDialog(this, "Ingrese la id del nodo:");
       if(graph_d.exist_node(Integer.parseInt(id))){
            JOptionPane.showMessageDialog(this, "El nodo "+id+" existe.");
       
       }else{
         JOptionPane.showMessageDialog(this, "El nodo "+id+" no existe.");
       }
       
    }//GEN-LAST:event_existNodeButtonActionPerformed

    private void existEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existEdgeButtonActionPerformed
        String from = JOptionPane.showInputDialog(this, "Ingrese la id del nodo de origen:");
        String to = JOptionPane.showInputDialog(this, "Ingrese la id del nodo de destino:");
        
        
       if(graph_d.exist_edge(graph_d.search_node(Integer.parseInt(from)),graph_d.search_node(Integer.parseInt(to)))){
            JOptionPane.showMessageDialog(this, "La arista ( "+from+" , "+to+" ) existe ");
       
       }else{
            JOptionPane.showMessageDialog(this, "La arista ( "+from+" , "+to+" ) no existe ");
       }
       
    }//GEN-LAST:event_existEdgeButtonActionPerformed

    private void addEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeButtonActionPerformed
           
            int node_a= node_selected_a.id;
            int node_b= node_selected_b.id;
            
            if(!exist_edge()){
            add_edge();
            JOptionPane.showMessageDialog(this, "Se agregó arista ( "+node_a+" , "+node_b+" )");
            }else{
                 JOptionPane.showMessageDialog(this, "La arista ya existe.");
            }
           
          
    }//GEN-LAST:event_addEdgeButtonActionPerformed

    private void getWeightEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getWeightEdgeButtonActionPerformed
        get_weight();
    }//GEN-LAST:event_getWeightEdgeButtonActionPerformed

    private void eraseEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseEdgeButtonActionPerformed
      
        int dialogResult = JOptionPane.showConfirmDialog (null, "¿Borrar arista ( "+node_selected_a.id+" , "+node_selected_b.id+" ) ?","Warning",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.YES_OPTION){
             erase_edge();
        }
       
    
    }//GEN-LAST:event_eraseEdgeButtonActionPerformed

    private void getAdjNodesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAdjNodesButtonActionPerformed
        adjacency_nodes();
    }//GEN-LAST:event_getAdjNodesButtonActionPerformed

    private void getAdjMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAdjMatrixButtonActionPerformed
       adjacency_matrix();
    }//GEN-LAST:event_getAdjMatrixButtonActionPerformed

    private void BackLabelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackLabelButtonMouseClicked
        Index index = new Index();
        index.setVisible(true);
        setVisible(false);
        
    }//GEN-LAST:event_BackLabelButtonMouseClicked
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Index().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackLabelButton;
    private javax.swing.JPanel DrawPanel;
    private javax.swing.JPanel EdgeOpPanel;
    private javax.swing.JPanel GraphOpPanel;
    private javax.swing.JPanel NodeOpPanel;
    private javax.swing.JPanel OptionsPanel;
    private javax.swing.JLabel SelectedObjectLabel;
    private static javax.swing.ButtonGroup TypeGraph;
    private javax.swing.JButton addEdgeButton;
    private javax.swing.JButton cleanGraphButton;
    private javax.swing.JButton eraseEdgeButton;
    private javax.swing.JButton existEdgeButton;
    private javax.swing.JButton existNodeButton;
    private javax.swing.JButton getAdjMatrixButton;
    private javax.swing.JButton getAdjNodesButton;
    private javax.swing.JButton getWeightEdgeButton;
    private javax.swing.JButton isEmptyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables

    private void draw(Graphics gr) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void ScaledImage(Image img, int width, int height) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
